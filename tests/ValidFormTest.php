<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-21 at 11:04:07.
 */
class ValidFormTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var ValidForm
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ValidForm;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers ValidForm::setSubmitLabel
     */
    public function testSetSubmitLabel()
    {
        $strLabel = Random::string();
        $this->object->setSubmitLabel($strLabel);

        $this->assertEquals($strLabel, $this->object->getSubmitLabel());
    }

    /**
     * @covers ValidForm::getSubmitLabel]
     * @depends testSetSubmitLabel
     */
    public function testGetSubmitLabel()
    {
        $strLabel = Random::string(); // 10 character random string
        $this->object->setSubmitLabel($strLabel);

        $this->assertEquals($this->object->getSubmitLabel(), $strLabel);
    }

    /**
     * @covers ValidForm::addHtml
     */
    public function testAddHtmlReturnsInstanceOfVF_String()
    {
        $objTest = $this->object->addHtml("<div></div>");
        $this->assertInstanceOf("VF_String", $objTest);
    }

    /**
     * @covers ValidForm::addNavigation
     */
    public function testAddNavigationReturnsInstanceOfVF_Navigation()
    {
        $objTest = $this->object->addNavigation();
        $this->assertInstanceOf("VF_Navigation", $objTest);
    }

    /**
     * @covers ValidForm::addFieldset
     */
    public function testAddFieldsetReturnsInstanceOfVF_Fieldset()
    {
        $objTest = $this->object->addFieldset();
        $this->assertInstanceOf("VF_Fieldset", $objTest);
    }

    /**
     * @covers ValidForm::addHiddenField
     */
    public function testAddHiddenFieldReturnsInstanceOfVF_Hidden()
    {
        $objTest = $this->object->addHiddenField(Random::string(), VFORM_STRING);
        $this->assertInstanceOf("VF_Hidden", $objTest);
    }

    /**
     * @covers ValidForm::renderField
     */
    public function testRenderFieldReturnsInstanceOfVF_Text()
    {
        $strName = Random::string();
        $strLabel = Random::string();

        $arrVFTextFieldTypes = array(
                                        "VFORM_STRING",
                                        "VFORM_WORD",
                                        "VFORM_EMAIL",
                                        "VFORM_URL",
                                        "VFORM_SIMPLEURL",
                                        "VFORM_CUSTOM",
                                        "VFORM_CURRENCY",
                                        "VFORM_DATE",
                                        "VFORM_NUMERIC",
                                        "VFORM_INTEGER"
                                     );

        foreach ($arrVFTextFieldTypes as $strFieldType) {
            $this->assertInstanceOf("VF_Text", $this->object->renderField($strName, $strLabel, constant($strFieldType), array(), array(), array()), "addField with field type " . $strFieldType . " does not return expected instance of VF_Text.");
        }
    }

    /**
     * @covers ValidForm::renderField
     */
    public function testRenderFieldReturnsInstanceOfVF_Password()
    {
        $strName = Random::string();
        $strLabel = Random::string();

        $this->assertInstanceOf("VF_Password", $this->object->renderField($strName, $strLabel, VFORM_PASSWORD, array(), array(), array()));
    }

    /**
     * @covers ValidForm::renderField
     */
    public function testRenderFieldReturnsInstanceOfVF_Captcha()
    {
        $strName = Random::string();
        $strLabel = Random::string();

        $this->assertInstanceOf("VF_Captcha", $this->object->renderField($strName, $strLabel, VFORM_CAPTCHA, array(), array(), array()));
    }

    /**
     * @covers ValidForm::renderField
     */
    public function testRenderFieldReturnsInstanceOfVF_Textarea()
    {
        $strName = Random::string();
        $strLabel = Random::string();

        $this->assertInstanceOf("VF_Textarea", $this->object->renderField($strName, $strLabel, VFORM_HTML, array(), array(), array()));
        $this->assertInstanceOf("VF_Textarea", $this->object->renderField($strName, $strLabel, VFORM_CUSTOM_TEXT, array(), array(), array()));
        $this->assertInstanceOf("VF_Textarea", $this->object->renderField($strName, $strLabel, VFORM_TEXT, array(), array(), array()));
    }

    /**
     * @covers ValidForm::renderField
     */
    public function testRenderFieldReturnsInstanceOfVF_File()
    {
        $strName = Random::string();
        $strLabel = Random::string();

        $this->assertInstanceOf("VF_File", $this->object->renderField($strName, $strLabel, VFORM_FILE, array(), array(), array()));
    }

    /**
     * @covers ValidForm::addField
     * @depends testRenderFieldReturnsInstanceOfVF_Text
     */
    public function testAddFieldReturnsInstanceOfVF_Element()
    {
        $strName = Random::string();
        $strLabel = Random::string();

        // Feed a non-existing field type to addField using Random::string(). This will cause addField to generate a blanc VF_Element.
        $this->assertInstanceOf("VF_Element", $this->object->addField($strName, $strLabel, Random::string()));
    }

    /**
     * @covers ValidForm::addParagraph
     */
    public function testAddParagraphReturnsVF_Paragraph()
    {
        $string1 = Random::string(600); // returns a 600 character random string
        $string2 = Random::string();

        $this->assertInstanceOf("VF_Paragraph", $this->object->addParagraph($string1, $string2));
    }

    /**
     * @covers ValidForm::addArea
     */
    public function testAddAreaReturnsVF_Area()
    {
        $this->assertInstanceOf("VF_Area", $this->object->addArea());
    }

    /**
     * @covers ValidForm::addMultiField
     */
    public function testAddMultiFieldReturnsVF_MultiField()
    {
        $this->assertInstanceOf("VF_MultiField", $this->object->addMultiField());
    }

    /**
     * @covers ValidForm::addJSEvent
     * @todo   Implement testAddJSEvent().
     */
    public function testAddJSEvent()
    {
        $strEventName = Random::string(); // Random 10 character string.
        $strEventCode = Random::string(100); // Random 100 character string.

        // Add a random "js event"
        $this->object->addJSEvent($strEventName, $strEventCode);

        // Get the javascript events storage
        $arrJsEvents = $this->object->getJsEvents();

        // Check if it's all in there.
        $this->assertArrayHasKey($strEventName, $arrJsEvents);
        $this->assertContains($strEventCode, $arrJsEvents);
    }

    /**
     * @covers ValidForm::toHtml
     * @todo   Implement testToHtml().
     */
    public function testToHtml()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ValidForm::serialize
     */
    public function testSerialize()
    {
        $this->object->valuesAsHtml();
        // Remove the following lines when you implement this test.
        $this->assertEquals($this->object->serialize(), base64_encode(gzcompress(serialize($this->object))));
    }

    /**
     * @covers ValidForm::isSubmitted
     */
    public function testIsSubmitted()
    {
        $blnForce = false;

        if (ValidForm::get("vf__dispatch") == $this->object->getName() || $blnForce) {
            $this->assertEquals($this->object->isSubmitted(), true);
        } else {
            $this->assertEquals($this->object->isSubmitted(), false);
        }
    }

    /**
     * @covers ValidForm::isSubmitted
     */
    public function testForceIsSubmitted()
    {
        $this->assertEquals($this->object->isSubmitted(true), true);
    }

    /**
     * @covers ValidForm::getFields
     */
    public function testGetFieldsReturnsVF_Collection()
    {
        $this->assertInstanceOf("VF_Collection", $this->object->getFields());
    }

    /**
     * @covers ValidForm::getValidField
     */
    public function testGetValidField()
    {
        $strName = Random::string();

        $objVformString = $this->object->addField($strName, Random::string(), VFORM_STRING);
        $this->assertEquals($this->object->getValidField($strName), $objVformString);
    }

    /**
     * @covers ValidForm::getInvalidFields
     * @todo   Implement testGetInvalidFields().
     */
    public function testGetInvalidFields()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ValidForm::isValid
     */
    public function testIsValidReturnsTrue()
    {
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers ValidForm::isValid
     */
    public function testIsValidReturnsFalse()
    {
        $strName = Random::string();
        $strLabel = Random::string();
        $strValue = Random::string();

        // Simulate 'post' value
        $_REQUEST[$strName] = $strValue;

        // Set a random string as default value for this field.
        $this->object->addField($strName, $strLabel, VFORM_EMAIL, array(), array(), array("default" => $strValue));
        $this->assertFalse($this->object->isValid(), "ValidForm isValid() returns true while containing invalid values.");
    }

    /**
     * @covers ValidForm::valuesAsHtml
     * @todo   Implement testValuesAsHtml().
     */
    public function testValuesAsHtml()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ValidForm::fieldsetAsHtml
     * @todo   Implement testFieldsetAsHtml().
     */
    public function testFieldsetAsHtml()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ValidForm::get
     * @todo   Implement testGet().
     */
    public function testGet()
    {
        $strKey = Random::string();
        $strValue = Random::string();

        $_REQUEST[$strKey] = $strValue;

        $this->assertEquals(ValidForm::get($strKey, null), $strValue);
        $this->assertEquals(ValidForm::get(Random::string(), null), null);

        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
