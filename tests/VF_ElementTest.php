<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-21 at 11:05:16.
 */
class VF_ElementTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var VF_Element
     */
    protected $object;

    /**
     * Name label
     * @var String
     */
    protected $name;

    /**
     * Field type ID
     * @var Integer
     */
    protected $type;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->name = Random::string();
        $this->object = new VF_Element($this->name, VFORM_STRING);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function elementTypesProvider() {
        return array(
            array("VFORM_STRING"),
            array("VFORM_TEXT"),
            array("VFORM_NUMERIC"),
            array("VFORM_INTEGER"),
            array("VFORM_WORD"),
            array("VFORM_EMAIL"),
            array("VFORM_PASSWORD"),
            array("VFORM_SIMPLEURL"),
            array("VFORM_FILE"),
            array("VFORM_BOOLEAN"),
            array("VFORM_CAPTCHA"),
            array("VFORM_RADIO_LIST"),
            array("VFORM_CHECK_LIST"),
            array("VFORM_SELECT_LIST"),
            array("VFORM_PARAGRAPH"),
            array("VFORM_CURRENCY"),
            array("VFORM_DATE"),
            array("VFORM_CUSTOM"),
            array("VFORM_CUSTOM_TEXT"),
            array("VFORM_HTML"),
            array("VFORM_URL")
        );
    }

    /**
     * @covers VF_Element::toHtml
     */
    public function testToHtml()
    {
        $this->assertEquals($this->object->toHtml(), "Field type not defined.");
    }

    /**
     * @covers VF_Element::__toHtml
     */
    public function test__toHtml()
    {
        $this->assertEquals($this->object->toHtml(), "Field type not defined.");
    }

    /**
     * @covers VF_Element::toJS
     */
    public function testToJS()
    {
        $this->assertEquals($this->object->toJS(), "alert('Field type not defined.');\n");
    }

    /**
     * @covers VF_Element::getDynamicCount
     * @dataProvider testGetDynamicCountProvider
     */
    public function testGetDynamicCount($intDynamicCount)
    {
        $this->object->setDynamic(true);
        $this->object->setDynamicCounter(new VF_Hidden($this->name . "_dynamic", VFORM_INTEGER));

        $_REQUEST[$this->name . "_dynamic"] = $intDynamicCount;

        for ($i = 0; $i <= $intDynamicCount; $i++) {
            $strSuffix = ($i === 0) ? "" : "_" . $i;
            $_REQUEST[$this->name . $strSuffix] = Random::string();
        }

        $this->assertEquals($intDynamicCount, $this->object->getDynamicCount());
    }

    /**
     * Data provider for VF_Element::testGetDynamicCount
     * @return Array
     */
    public function testGetDynamicCountProvider() {
        return self::range(0,20);
    }

    /**
     * Range generator for dataProviders
     * @param  Integer $start Start of the range
     * @param  Integer $end   End of the range
     * @return Array        An array containing arrays for each range value
     */
    private static function range($start, $end) {
        $arrReturn = array();
        for ($i = $start; $i <= $end; $i++) {
            array_push($arrReturn, array($i));
        }

        return $arrReturn;
    }
}
