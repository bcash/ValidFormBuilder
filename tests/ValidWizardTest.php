<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-21 at 11:04:27.
 */
class ValidWizardTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var ValidWizard
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ValidWizard();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers ValidWizard::addMultiField
     */
    public function testAddMultiFieldReturnsVF_MultiField()
    {
        $this->assertInstanceOf("VF_MultiField", $this->object->addMultiField());
    }

    /**
     * @covers ValidWizard::getPage
     */
    public function testGetPageReturnsNullAsDefaultValue()
    {
        $this->assertNull($this->object->getPage());
    }

    /**
     * @covers ValidWizard::addPage
     */
    public function testAddPage()
    {
        $objPage = $this->object->addPage();
        $this->assertTrue($this->object->getElements()->inCollection($objPage));

        return $objPage;
    }

    /**
     * @covers ValidWizard::addPage
     * @depends testAddPage
     */
    public function testAddPageReturnsVF_Page($objPage)
    {
        $this->assertInstanceOf("VF_Page", $objPage);
    }

    /**
     * @covers ValidWizard::addField
     */
    public function addFieldAddsPageWhenWizardHasNoElements()
    {
        // The collection should be empty by default.
        $this->assertEquals(0, $this->object->getElements()->count(), "ValidWizard collection not empty by default.");

        // Add a field and automatically add a page element to the collection
        $this->object->addField(Random::string(), Random::string(), VFORM_STRING);

        // Check that two elements are added to the collection
        $this->assertEquals(2, $this->object->getElements()->count(), "ValidWizard did not add two elements to the collection when adding one field element.");

        // Check that these elements are both a VF_Page and a VF_Text element.
        $this->assertTrue($this->object->getElements()->inCollection("VF_Page"), "No VF_Page element found in ValidWizard collection.");
        $this->assertTrue($this->object->getElements()->getLast("VF_Page")->getElements()->inCollection("VF_Text"), "No VF_Text element found in ValidWizard collection.");
    }

    /**
     * @covers ValidWizard::addFieldset
     */
    public function testAddFieldsetReturnsVF_Fieldset()
    {
        $this->assertInstanceOf("VF_Fieldset", $this->object->addFieldset());
    }

    /**
     * @covers ValidWizard::addFieldset
     */
    public function testAddFieldsetAddsPageIfCollectionIsEmpty()
    {
        // The collection should be empty by default.
        $this->assertEquals(0, $this->object->getElements()->count());

        // Add a fieldset and automatically add a page element to the collection
        $this->object->addFieldset();

        // Check that two elements are added to the collection
        $this->assertEquals(2, $this->object->getElements()->count(), "ValidWizard did not add two elements to the collection when adding one field element.");

        // Check that these elements are both a VF_Page and a VF_Text element.
        $this->assertTrue($this->object->getElements()->inCollection("VF_Page"), "No VF_Page element found in ValidWizard collection.");
        $this->assertTrue($this->object->getElements()->getLast("VF_Page")->getElements()->inCollection("VF_Fieldset"), "No VF_Fieldset element found in ValidWizard collection.");
    }

    /**
     * @covers ValidWizard::valuesAsHtml
     * @todo   Implement testValuesAsHtml().
     */
    public function testValuesAsHtml()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ValidWizard::isValidUntil
     * @todo   Implement testIsValidUntil().
     */
    public function testIsValidUntil()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ValidWizard::getInvalidFieldsUntil
     * @todo   Implement testGetInvalidFieldsUntil().
     */
    public function testGetInvalidFieldsUntil()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ValidWizard::getFields
     * @todo   Implement testGetFields().
     */
    public function testGetFields()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
